version: "3.9"
services:
  postgres:
    container_name: postgres
    image: postgres:15.4-alpine3.18
    environment:
      POSTGRES_DB: "otusdb"
      POSTGRES_USER: "sa"
      POSTGRES_PASSWORD: "medtex"
    volumes:
      - ../migrations/profile:/docker-entrypoint-initdb.d
      - otusdb-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  pgbouncer:
    image: edoburu/pgbouncer
    restart: always
    user: postgres
    depends_on:
      - postgres
    ports:
      - "6432:6432"
    environment:
      POSTGRESQL_HOST: postgres
      POSTGRESQL_PORT: 5432
      POSTGRESQL_DATABASE: otusdb
      POSTGRESQL_USERNAME: sa
      POSTGRESQL_PASSWORD: medtex
      AUTH_TYPE: md5
      AUTH_FILE: /etc/pgbouncer/userlist.txt
    volumes:
      - ./config/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./config/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt

  redis-server:
    image: "redis:alpine"
    hostname: "redis-server"
    container_name: redis-server

    ports:
     - "6379:6379"

    volumes:
     - redis-data:/var/lib/redis

  jaeger:
    image: jaegertracing/all-in-one:1.45
    hostname: "jaeger"
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14269:14269
      - 14250:14250
      - 9411:9411
      - 4317:4317
      - 4318:4318

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

  haproxy:
    image: haproxy
    container_name: haproxy
    volumes:
      - "./config/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"
    ports:
      - "8405:8405"
      - "8404:8404"

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./config/prometheus:/etc/prometheus
    ports:
      - "9090:9090"
 
  grafana:
    image: grafana/grafana
    user: root
    volumes:
      - ./config/grafana:/var/lib/grafana
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000


  bff_go:
    container_name: bff_go
    image: bff_go:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/go/bff.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - EXPOSE_PORT=$EXPOSE_PORT
      - GRPC_PROFILE=$GRPC_PROFILE_GO
      - GRPC_POSTS=$GRPC_POSTS_GO
      - GRPC_DIALOGS=$GRPC_DIALOGS_GO
      - GRPC_COUNTERS=$GRPC_COUNTERS_GO
      - REST_PORT=$REST_BFF_PORT_GO
      - GRPC_PORT=$GRPC_BFF_PORT_GO
      - SECURITY_KEY=$SECURITY_KEY
      - OTEL_EXPORTER_JAEGER_ENDPOINT=jaeger:4318
    ports:
      - "8009:8009"
    depends_on:
      - postgres
      - rabbitmq
      - jaeger

  bff_cs:
    container_name: bff_cs
    image: bff_cs:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/cs/bff.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - EXPOSE_PORT=$EXPOSE_PORT
      - GRPC_PROFILE=$GRPC_PROFILE_CS
      - GRPC_POSTS=$GRPC_POSTS_CS
      - GRPC_DIALOGS=$GRPC_DIALOGS_CS
      - GRPC_COUNTERS=$GRPC_COUNTERS_CS
      - GRPC_PORT=$GRPC_BFF_PORT_CS
      - REST_PORT=$REST_BFF_PORT_CS
      - SECURITY_KEY=$SECURITY_KEY
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_JAEGER_AGENT_HOST=jaeger
    ports:
      - "8010:8010"
    depends_on:
      - postgres
      - rabbitmq
      - jaeger

  profile_go:
    container_name: profile_go
    image: profile_go:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/go/profile.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - EXPOSE_PORT=$EXPOSE_PORT
      - POSTGRESQL_CONNECTION=$POSTGRESQL_CONNECTION	
      - SECURITY_KEY=$SECURITY_KEY
      - REDIS_HOST=$REDIS_HOST
      - POSTGRESQL_READ_CONNECTION=$POSTGRESQL_READ_CONNECTION
      - RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION
      - GRPC_PORT=$GRPC_PROFILE_PORT_GO
      - REST_PORT=$REST_PROFILE_PORT_GO
    ports:
      - "8001:8001"
      - "8101:8101"
    depends_on:
      - postgres
      - rabbitmq

  profile_cs:
    container_name: profile_cs
    image: profile_cs:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/cs/profile.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - EXPOSE_PORT=$EXPOSE_PORT
      - POSTGRESQL_CONNECTION=$POSTGRESQL_CONNECTION_CS	
      - SECURITY_KEY=$SECURITY_KEY
      - REDIS_HOST=$REDIS_HOST
      - POSTGRESQL_READ_CONNECTION=$POSTGRESQL_READ_CONNECTION
      - RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION
      - GRPC_PORT=$GRPC_PROFILE_PORT_CS
      - REST_PORT=$REST_PROFILE_PORT_CS
    ports:
      - "8002:8002"
      - "8102:8102"
    depends_on:
      - postgres
      - rabbitmq

  posts_go:
    container_name: posts_go
    image: posts_go:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/go/posts.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - EXPOSE_PORT=$EXPOSE_PORT
      - POSTGRESQL_CONNECTION=$POSTGRESQL_POSTDB_CONNECTION	
      - SECURITY_KEY=$SECURITY_KEY
      - REDIS_HOST=$REDIS_HOST
      - POSTGRESQL_READ_CONNECTION=$POSTGRESQL_POSTDB_READ_CONNECTION
      - RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION
      - GRPC_PORT=$GRPC_POSTS_PORT_GO
      - REST_PORT=$REST_POSTS_PORT_GO
    ports:
      - "8007:8007"
      - "8107:8107"
    depends_on:
      - postgres
      - redis-server
      - rabbitmq

  posts_cs:
    container_name: posts_cs
    image: posts_cs:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/cs/posts.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - EXPOSE_PORT=$EXPOSE_PORT
      - POSTGRESQL_CONNECTION=$POSTGRESQL_POSTDB_CONNECTION_CS	
      - SECURITY_KEY=$SECURITY_KEY
      - REDIS_HOST=$REDIS_HOST
      - POSTGRESQL_READ_CONNECTION=$POSTGRESQL_POSTDB_READ_CONNECTION
      - RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION
      - GRPC_PORT=$GRPC_POSTS_PORT_CS
      - REST_PORT=$REST_POSTS_PORT_CS
    ports:
      - "8008:8008"
      - "8108:8108"
    depends_on:
      - postgres
      - redis-server
      - rabbitmq

  dialogs_go:
    container_name: dialogs_go
    image: dialogs_go:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/go/dialogs.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - EXPOSE_PORT=$EXPOSE_PORT
      - POSTGRESQL_CONNECTION_DB=$POSTGRESQL_CONNECTION
      - POSTGRESQL_READ_CONNECTION=$POSTGRESQL_DIALOGDB_READ_CONNECTION
      - SECURITY_KEY=$SECURITY_KEY
      - REDIS_HOST=$REDIS_HOST
      - RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION
      - GRPC_PORT=$GRPC_DIALOGS_PORT_GO
      - REST_PORT=$REST_DIALOGS_PORT_GO
    ports:
      - "8003:8003"
      - "8103:8103"
    depends_on:
      - postgres
      - rabbitmq

  dialogs_cs:
    container_name: dialogs_cs
    image: dialogs_cs:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/cs/dialogs.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - EXPOSE_PORT=$EXPOSE_PORT
      - POSTGRESQL_DIALOGDB_CONNECTION=$POSTGRESQL_CONNECTION_CS
      - SECURITY_KEY=$SECURITY_KEY
      - REDIS_HOST=$REDIS_HOST
      - POSTGRESQL_DIALOGDB_READ_CONNECTION=$POSTGRESQL_DIALOGDB_READ_CONNECTION_CS
      - RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION
      - GRPC_PORT=$GRPC_DIALOGS_PORT_CS
      - REST_PORT=$REST_DIALOGS_PORT_CS
    ports:
      - "8004:8004"
      - "8104:8104"
    depends_on:
      - postgres
      - rabbitmq

  websockets_go:
    container_name: websockets_go
    image: websockets_go:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/go/websockets.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - EXPOSE_PORT=$EXPOSE_PORT
      - POSTGRESQL_CONNECTION=$POSTGRESQL_CONNECTION		
      - SECURITY_KEY=$SECURITY_KEY
      - RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION
      - REDIS_HOST=$REDIS_HOST
      - REST_PORT=$REST_WEBSOCK_PORT_GO
    ports:
      - "8005:8005"
    depends_on:
      - rabbitmq
      - redis-server

  websockets_cs:
    container_name: websockets_cs
    image: websockets_cs:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/cs/websockets.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION
      - SECURITY_KEY=$SECURITY_KEY
      - POSTGRESQL_CONNECTION=$POSTGRESQL_CONNECTION_CS		
      - REDIS_HOST=$REDIS_HOST
      - REST_PORT=$REST_WEBSOCK_PORT_CS
    ports:
      - "8006:8006"
    depends_on:
      - rabbitmq
      - redis-server

  counters_go:
    container_name: counters_go
    image: counters_go:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/go/counters.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - EXPOSE_PORT=$EXPOSE_PORT
      - POSTGRESQL_CONNECTION=$POSTGRESQL_CONNECTION		
      - SECURITY_KEY=$SECURITY_KEY
      - RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION
      - REDIS_HOST=$REDIS_HOST
      - REST_PORT=$REST_COUNTERS_PORT_GO
      - POSTGRESQL_READ_CONNECTION=$POSTGRESQL_DIALOGDB_READ_CONNECTION
      - GRPC_PORT=$GRPC_COUNTERS_PORT_GO
    ports:
      - "8011:8011"
    depends_on:
      - rabbitmq

  counters_cs:
    container_name: counters_cs
    image: counters_cs:$APP_VERSION
    build:
      context: ..
      dockerfile: docker/cs/counters.Dockerfile
      target: final
      args:
        APP_VERSION: $APP_VERSION
    environment:
      - RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION
      - SECURITY_KEY=$SECURITY_KEY
      - POSTGRESQL_CONNECTION=$POSTGRESQL_CONNECTION_CS		
      - POSTGRESQL_READ_CONNECTION=$POSTGRESQL_DIALOGDB_READ_CONNECTION_CS
      - REST_PORT=$REST_COUNTERS_PORT_CS
      - GRPC_PORT=$GRPC_COUNTERS_PORT_CS
      - REDIS_HOST=$REDIS_HOST
    ports:
      - "8012:8012"
    depends_on:
      - rabbitmq

  front:
    container_name: front
    build:
      context: ..
      dockerfile: docker/front/front.Dockerfile
    environment:
      - RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION
      - REST_PORT=$REST_WEBSOCK_PORT_CS
    ports:
      - '3104:80'

volumes:                     
  otusdb-data:
  redis-data:
  healthcheck-volume: