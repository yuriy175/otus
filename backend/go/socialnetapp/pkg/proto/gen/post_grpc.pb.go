// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: post.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostClient is the client API for Post service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostClient interface {
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FeedPosts(ctx context.Context, in *FeedPostsRequest, opts ...grpc.CallOption) (Post_FeedPostsClient, error)
}

type postClient struct {
	cc grpc.ClientConnInterface
}

func NewPostClient(cc grpc.ClientConnInterface) PostClient {
	return &postClient{cc}
}

func (c *postClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Post/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) FeedPosts(ctx context.Context, in *FeedPostsRequest, opts ...grpc.CallOption) (Post_FeedPostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Post_ServiceDesc.Streams[0], "/Post/FeedPosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &postFeedPostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Post_FeedPostsClient interface {
	Recv() (*PostReply, error)
	grpc.ClientStream
}

type postFeedPostsClient struct {
	grpc.ClientStream
}

func (x *postFeedPostsClient) Recv() (*PostReply, error) {
	m := new(PostReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PostServer is the server API for Post service.
// All implementations must embed UnimplementedPostServer
// for forward compatibility
type PostServer interface {
	CreatePost(context.Context, *CreatePostRequest) (*emptypb.Empty, error)
	FeedPosts(*FeedPostsRequest, Post_FeedPostsServer) error
	mustEmbedUnimplementedPostServer()
}

// UnimplementedPostServer must be embedded to have forward compatible implementations.
type UnimplementedPostServer struct {
}

func (UnimplementedPostServer) CreatePost(context.Context, *CreatePostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostServer) FeedPosts(*FeedPostsRequest, Post_FeedPostsServer) error {
	return status.Errorf(codes.Unimplemented, "method FeedPosts not implemented")
}
func (UnimplementedPostServer) mustEmbedUnimplementedPostServer() {}

// UnsafePostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServer will
// result in compilation errors.
type UnsafePostServer interface {
	mustEmbedUnimplementedPostServer()
}

func RegisterPostServer(s grpc.ServiceRegistrar, srv PostServer) {
	s.RegisterService(&Post_ServiceDesc, srv)
}

func _Post_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Post/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_FeedPosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FeedPostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PostServer).FeedPosts(m, &postFeedPostsServer{stream})
}

type Post_FeedPostsServer interface {
	Send(*PostReply) error
	grpc.ServerStream
}

type postFeedPostsServer struct {
	grpc.ServerStream
}

func (x *postFeedPostsServer) Send(m *PostReply) error {
	return x.ServerStream.SendMsg(m)
}

// Post_ServiceDesc is the grpc.ServiceDesc for Post service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Post_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Post",
	HandlerType: (*PostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _Post_CreatePost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FeedPosts",
			Handler:       _Post_FeedPosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "post.proto",
}
